@page "/list-group/{GetCurrentGroupIDPage:int}"

@using CW_ordermedicine.Data.Models
@using CW_ordermedicine.Data.Services
@inject UserService userService
@inject GroupMemberService groupmemberService
@inject LoginService loginService
@inject NotificationService notificationservice
@inject NavigationManager NavigationManager

<!-- รูปแบบเก่าที่ไม่ใช้ Component -->
<div class="">

	@foreach (var Group in ListGroupMember.FindAll(e => e.GroupID == GetCurrentGroupIDPage))
	{
		<h2 class="">
			กลุ่ม : @Group.GroupName
		</h2>
	}

</div>

<RadzenDataGrid FilterMode="FilterMode.Simple" AllowFiltering="true" AllowPaging="true" AllowSorting="true"
				PageSize="10" Data="@ListUsers.Where(e=>e.GroupID == GetCurrentGroupIDPage)" TItem="User" ColumnWidth="150px">
	<Columns>

		<RadzenDataGridColumn TItem="User" Title="#">
			<Template Context="data">
				@(ListUsers.IndexOf(data) + 1)
			</Template>

		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="User" Property="" Title="ภาพ">
			<Template Context="User">
				@*<RadzenImage Path="@($"data:img/")" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px; float: left;" />*@
				<RadzenImage Path="@("img/"+User.UserImgName )" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px; float: left;" />

			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="User" Property="Name" Title="ชื่อ - นามสกุล" Filterable="false" TextAlign="TextAlign.Center"></RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="User" Property="Department" Title="แผนก" Filterable="false" TextAlign="TextAlign.Center"></RadzenDataGridColumn>
		@if (UserLogin.Level == "admin")
		{
			<RadzenDataGridColumn TItem="User" Property="" Title="ลบสมาชิก" Filterable="false" TextAlign="TextAlign.Center">

				<Template Context="data">
					<RadzenButton Click=@(args => SentValue(data)) data-bs-toggle="modal" data-bs-target="#ModalDelete"
							  ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" Class="m-1" />
				</Template>

				@*<Template Context="data">
			<RadzenButton Click=@(args => OpenOrderBillPage(data.OrderID))
			ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="pageview" Class="m-1" />
			</Template>*@
			</RadzenDataGridColumn>
		}
		@if (UserLogin.Level == null)
		{
			<RadzenDataGridColumn TItem="User" Property="" Title="ลบสมาชิก" Filterable="false" TextAlign="TextAlign.Center">

				<Template Context="data">
					<RadzenButton Click=ShowNotificationAlert
							  ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" Class="m-1" />
				</Template>
			</RadzenDataGridColumn>
		}
	</Columns>
</RadzenDataGrid>

@*//Modal ปุ่มยืนยันลบ*@
<div class="modal fade" id="ModalDelete" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel"><i class="fa-sharp fa-solid fa-circle-check text-success"></i> กรุณายืนยันคำสั่ง</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="" style="text-align:center;">
					คุณต้องการที่จะลบสมาชิก @ValueUser.Name ใช่ หรือ ไม่ ?
				</div>


			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
				<button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="()=>OnDeleteMember(ValueUser)">ยืนยัน</button>
			</div>
		</div>
	</div>
</div>
<div class="position-sticky" style=" bottom:0px; text-align:end;  ">
	<div class="row">
		<div class="">
			@if (UserLogin.Level == "admin")
			{
				<button class="btn btn-success shadow mt-1 mb-2" style="border-radius:50%; font-size:30px; border:none;" data-bs-toggle="modal" data-bs-target="#FromAddMember">
					<i class="fa-solid fa-plus" style="font-size:30px;"></i>
				</button>
			}
			else
			{
				<button class="btn btn-success shadow mt-1 mb-2" style="border-radius:50%; font-size:30px; border:none;" @onclick="ShowNotificationAlert">
					<i class="fa-solid fa-plus" style="font-size:30px;"></i>
				</button>
			}
		</div>
	</div>
</div>

<FromAddMember OnAddSelectedUser="RefreshMember" CurrentGroupID="GetCurrentGroupIDPage"></FromAddMember>

@code {
	[Parameter]
	public int GetCurrentGroupIDPage { get; set; }

	private List<User> ListUsers = new List<User>();
	private int CountMember;
	private int AmountPeople = 0;
	private List<GroupMember> ListGroupMember = new List<GroupMember>();
	private List<User> Model = new List<User>();
	private User? UserLogin = new();
	private User? UserE = new();
	int i = 1;
	private User? ValueUser = new();
	//private List<User?> User = new();
	protected override async Task OnInitializedAsync()
	{
		var Users = await userService.GetUserAsync();
		foreach (var user in Users)
		{
			ListUsers.Add(new User().ToUi(user));
		}

		var Groups = await groupmemberService.GetGroupAsync();
		foreach (var Group in Groups)
		{
			ListGroupMember.Add(new GroupMember().ToUi(Group));
		}

		//ListGroupMember = await groupmemberService.GetGroupAsync();
		UserLogin = new User().ToUi(loginService.UserToLogin); //แปลงไปใช้ของ UserToUI
	}

	private void OnDeleteMember(User eleuser)
	{
		//ListUser.Add(new User()
		//	{
		//		UserID = eleuser.UserID,
		//		Username = eleuser.Username,
		//		Department = eleuser.Department,
		//		GroupID = 0

		//	});
		eleuser.GroupID = 0;
		var a = new User().ToTable(eleuser); //นำค่ามาเก็บใน a แต่ยังไม่บันทึกข้อมูล
		userService.EditUser(a); //บันทึกข้อมูล
		ListUsers.Remove(eleuser);
		ShowNotificationDeleteMember();
		RefreshData();
	}
	private void CountPeople()
	{

		AmountPeople++;
	}

	private void RefreshMember(List<User> SelectedUser)
	{
		foreach (var SelectedUsers in SelectedUser)
		{
			ListUsers.Add(SelectedUsers);
			SelectedUsers.GroupID = GetCurrentGroupIDPage;

			var a = new User().ToTable(SelectedUsers); //นำค่ามาเก็บใน a แต่ยังไม่บันทึกข้อมูล
			userService.EditUser(a); //บันทึกข้อมูล

		}

	}
	private void ShowNotificationDeleteMember()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "สมาชิกชื่อ " + ValueUser.Name + " ถูกลบแล้ว",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}
	private void ShowNotificationAlert()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Warning,
				Summary = "สำหรับ admin เท่านั้น !",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}
	private void SentValue(User? ID)
	{
		ValueUser = ID;
	}
	private async void RefreshData()
	{
		NavigationManager.NavigateTo($"/RP_ProfileProduct");
		NavigationManager.NavigateTo($"/list-group/{GetCurrentGroupIDPage}");
	}
}

