@page "/buyorder"
@using CW_ordermedicine.Data.Models
@using CW_ordermedicine.Data.Services
@inject ProductService productService
@inject CartProductService cartproductService
@inject OrderService orderService
@inject NotificationService notificationservice
<HeadBill></HeadBill>
<div class="container-fluid">

<div class="mt-3 position-sticky" style="bottom:0px; text-align:end; z-index:0;">
	<button type="button" class="btn  " @onclick="ShowCart">
		<i class="fa-solid fa-cart-plus" style="color:black"></i>
		<span class=" badge rounded-pill bg-danger" style=" top:-20px;">
			@ListCartProduct.Count

			<span class="visually-hidden">unread messages</span>
		</span>
	</button>
</div>

@if (IsShowCart)
{
	<div class="Search-result bg-black bg-opacity-50 d-flex justify-content-center " style="position:absolute;z-index:1;">

		<div style="position:absolute; left:85%; top:2%;">
			<i @onclick="OnCloseCart" class="fa-solid fa-circle-xmark" style="font-size:30px;color:orangered;cursor:pointer"></i>  <!--ปุ่มปิดกากบาท-->
		</div>
		<div class="row mb-2 d-inline-flex justify-content-end position-relative" style="bottom:-2%;left:80%;">
		</div>

		<div class="bg-white list_Product overflow-scroll" style="position:relative; top:70px;">
			<Cart></Cart>
		</div>
	</div>
}

@if (ListProduct == null)
{
	<p>Loading </p>
}
else
		{
<RadzenGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
			PageSize="10" AllowSorting="true" Data="@ListProduct" TItem="Product" ColumnWidth="150px">
	<Columns>
			<RadzenGridColumn TItem="Product" Property="IDProduct" Title="IDProduct" Filterable="false"></RadzenGridColumn>
			<RadzenGridColumn TItem="Product" Property="NameProduct" Title="NameProduct" Width="300px"></RadzenGridColumn>
			<RadzenGridColumn TItem="Product" Property="RemainderProduct" Title="RemainderProduct" Filterable="false"></RadzenGridColumn>
			<RadzenGridColumn TItem="Product" Property="UnitProduct" Title="UnitProduct" Filterable="false"></RadzenGridColumn>
			<RadzenGridColumn TItem="Product" Property="StorageProduct" Title="StorageProduct"Filterable="false"></RadzenGridColumn>
			
			<RadzenGridColumn TItem="Product" Property="PriceProduct" Title="PriceProduct" Filterable="false"></RadzenGridColumn>
			<RadzenGridColumn  TItem="Product">
				<Template Context="data">
					<RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="add_shopping_cart" Class="m-1" Click=@(args => SelectProduct(data)) />
				</Template>
			</RadzenGridColumn>
				
			
			
		
	</Columns>
</RadzenGrid>

}
</div>
@code {

	private List<Product> ListProduct = new List<Product>();
	private List<CartProduct> ListCartProduct = new List<CartProduct>();
	private List<Order> ListOrders = new List<Order>();

	private bool IsShowCart = false;
	int Count = 1;
	protected override async Task OnInitializedAsync()
	{
		//ListProduct = await productService.GetProductsAsync();
		var Products = await productService.GetProductsAsync();
		foreach (var Product in Products)
		{
			ListProduct.Add(new Product().ToUi(Product));
		}
		ListCartProduct = await cartproductService.GetCartProductsAsync();
		var Orders = await orderService.GetOrderAsync();
		foreach (var order in Orders)
		{
			ListOrders.Add(new Order().ToUi(order));
		}
	}

	public void SelectProduct(Product eleproduct)
	{

		//int IDCartCount = ListCartProduct;		

		var a = ListCartProduct.Find(e => e.NameProduct == eleproduct.NameProduct); //ชื่อสินค้าในตระกร้า กับ ชื่อสินค้าในคลังถ้ามีอยู่ในตระกร้าซ้ำจะเพิ่มแค่จำนวนไม่เพิ่มสินค้า
		var b = ListProduct.Find(e => e.IDProduct == eleproduct.IDProduct);
		@if (b.RemainderProduct == 0)
		{
			ShowNotificationOver();
			return;
		}
		@if (a != null)
		{
			a.AmountProduct++;
			@if (a.AmountProduct > b.RemainderProduct)
			{
				a.AmountProduct = b.RemainderProduct;
			}
		}
		else
		{
			
			ListCartProduct.Add(new CartProduct()
				{
					Cartid = Count++,
					IDProduct = eleproduct.IDProduct,
					NameProduct = eleproduct.NameProduct,
					AmountProduct = 1,

					UnitProduct = eleproduct.UnitProduct,
					PriceProduct = eleproduct.PriceProduct,

				});
		}
		ShowNotification();
		//AddProduct.Add(eleproduct);


	}

	private void ShowCart()
	{
		IsShowCart = !IsShowCart;
	}
	public void OnCloseCart()
	{
		IsShowCart = !IsShowCart;
	}

	private void ShowNotification()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "เพิ่มสินค้าลงตะกร้าแล้ว",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}
	private void ShowNotificationOver()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "สินค้าหมด",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}

}
